{"name":"Groundy","tagline":"Sexy way to execute async/background tasks on Android","body":"Groundy library for Android\r\n===========================\r\n\r\nGroundy is a fancy implementation of the 'Service + ResultReceiver' technique which\r\nis heavily inspired in a Google I/O 2010 presentation by Virgil Dobjanschi\r\ncalled [Android REST client applications][1].\r\n\r\nGroundy is useful in any kind of apps that requires the use of background threads:\r\n\r\n- Execute calls to external services (e.g. RESTful web services)\r\n- Download and/or process files\r\n- Encoding audio/video\r\n- Any kind of task that could block the main thread\r\n\r\nGroundy offers a special `Service` that will take care of creating background\r\nthreads and allows to report results to the `Activity` using a `ResultReceiver`.\r\n\r\nBasic usage\r\n===========\r\n\r\nCreate a subclass of `GroundyTask`:\r\n\r\n```java\r\npublic class ExampleTask extends GroundyTask {\r\n    @Override\r\n    protected boolean doInBackground() {\r\n        // use params\r\n        String exampleParam = getStringParam(\"key_name\");\r\n\r\n        // lots of code\r\n\r\n        // add results... this will be sent back to the activity\r\n        // through the ResultReceiver once this method has returned\r\n        addStringResult(\"the_result\", \"some result\");\r\n\r\n        return success; // true if task was executed successfully\r\n    }\r\n}\r\n```\r\n\r\nWhenever you want to execute the task, just do this:\r\n\r\n```java\r\n// this is usually performed from within an Activity\r\nBundle params = new Bundler().add(\"key_name\", \"foo\").build();\r\nGroundy.create(this, ExampleTask.class)\r\n       .receiver(receiver) // optional\r\n       .params(params)     // optional\r\n       .queue();\r\n```\r\n\r\nYou will get results in your result receiver (in the main thread):\r\n\r\n```java\r\nprivate final ResultReceiver receiver = new ResultReceiver(new Handler()){\r\n    @Override\r\n    protected void onReceiveResult(int resultCode, Bundle resultData) {\r\n        String result = resultData.getString(\"the_result\");\r\n        // do something\r\n    }\r\n};\r\n```\r\n\r\nDo not forget to add `GroundyService` to the `AndroidManifest.xml` file:\r\n\r\n```xml\r\n<service android:name=\"com.codeslap.groundy.GroundyService\"/>\r\n```\r\n\r\nMaven integration\r\n=================\r\n\r\n[![Build Status](https://travis-ci.org/casidiablo/groundy.png?branch=develop)](https://travis-ci.org/casidiablo/groundy)\r\n\r\nIn order to use this library from you Android project using maven your pom should look like this:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.codeslap</groupId>\r\n    <artifactId>groundy</artifactId>\r\n    <version>0.6</version>\r\n    <scope>compile</scope>\r\n</dependency>\r\n```\r\n\r\nLicense\r\n=======\r\n\r\n>Copyright 2013 CodeSlap\r\n>\r\n>Licensed under the Apache License, Version 2.0 (the \"License\");\r\n>you may not use this file except in compliance with the License.\r\n>You may obtain a copy of the License at\r\n>\r\n>  http://www.apache.org/licenses/LICENSE-2.0\r\n>\r\n>Unless required by applicable law or agreed to in writing, software\r\n>distributed under the License is distributed on an \"AS IS\" BASIS,\r\n>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n>See the License for the specific language governing permissions and\r\n>limitations under the License.\r\n\r\n  [1]: http://www.youtube.com/watch?v=xHXn3Kg2IQE","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}